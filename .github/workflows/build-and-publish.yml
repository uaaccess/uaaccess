name: Build, Package, and Publish Release

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*' # Trigger on tags starting with 'v'

jobs:
  mac_build:
    name: Build and Package on MacOS
    runs-on: macos-latest
    outputs:
      mac_installer_name: ${{ steps.find_installer.outputs.artifact_name }}
      mac_portable_name: ${{ steps.find_portable.outputs.artifact_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install dependencies and run build script
        run: |
          python -m venv uaaccess_env
          source uaaccess_env/bin/activate
          pip install --upgrade pip
          cd builder
          python build_uaaccess.py
          python build_uaaccess.py zip
        env:
          BRIEFCASE_PLATFORM: macOS

      - name: Find installer package
        id: find_installer
        run: |
          artifact=$(ls dist/*.pkg 2>/dev/null | head -n 1)
          if [ -z "$artifact" ]; then
            echo "Error: No .pkg file found in the dist directory."
            exit 1
          fi
          artifact_name=$(basename "$artifact")
          echo "artifact_path=$artifact" >> $GITHUB_OUTPUT
          echo "artifact_name=$artifact_name" >> $GITHUB_OUTPUT

      - name: Find portable package
        id: find_portable
        run: |
          artifact=$(ls dist/*.dmg 2>/dev/null | head -n 1)
          if [ -z "$artifact" ]; then
            echo "Error: No .dmg file found in the dist directory."
            exit 1
          fi
          artifact_name=$(basename "$artifact")
          echo "artifact_path=$artifact" >> $GITHUB_OUTPUT
          echo "artifact_name=$artifact_name" >> $GITHUB_OUTPUT

      - name: Upload installer
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.find_installer.outputs.artifact_name }}
          path: ${{ steps.find_installer.outputs.artifact_path }}
          retention-days: 1

      - name: Upload portable
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.find_portable.outputs.artifact_name }}
          path: ${{ steps.find_portable.outputs.artifact_path }}
          retention-days: 1

  windows_build:
    name: Build and Package on Windows
    runs-on: windows-latest
    outputs:
      windows_installer_name: ${{ steps.find_installer.outputs.artifact_name }}
      windows_portable_name: ${{ steps.find_portable.outputs.artifact_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install Visual Studio Build Tools
        run: |
          choco install -y visualstudio2022buildtools --package-parameters "--add Microsoft.VisualStudio.Workload.VCTools --quiet --norestart"

      - name: Install dependencies and run build script
        run: |
          python -m venv uaaccess_env
          uaaccess_env\Scripts\activate
          pip install --upgrade pip
          cd builder
          python build_uaaccess.py
          python build_uaaccess.py zip
        env:
          BRIEFCASE_PLATFORM: windows

      - name: Find installer package
        id: find_installer
        shell: pwsh
        run: |
          $pattern = 'dist\*.msi'
          $artifact = Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | Select-Object -First 1
          if (-not $artifact) {
            Write-Error "Error: No .msi file found in the dist directory."
            exit 1
          }
          $artifactPath = $artifact.FullName
          $artifactName = $artifact.Name
          "artifact_path=$artifactPath" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          "artifact_name=$artifactName" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

      - name: Find portable package
        id: find_portable
        shell: pwsh
        run: |
          $pattern = 'dist\*.zip'
          $artifact = Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | Select-Object -First 1
          if (-not $artifact) {
            Write-Error "Error: No .zip file found in the dist directory."
            exit 1
          }
          $artifactPath = $artifact.FullName
          $artifactName = $artifact.Name
          "artifact_path=$artifactPath" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          "artifact_name=$artifactName" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

      - name: Upload installer
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.find_installer.outputs.artifact_name }}
          path: ${{ steps.find_installer.outputs.artifact_path }}
          retention-days: 1

      - name: Upload portable
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.find_portable.outputs.artifact_name }}
          path: ${{ steps.find_portable.outputs.artifact_path }}
          retention-days: 1

  publish:
    name: Publish Release
    runs-on: ubuntu-latest
    needs:
      - mac_build
      - windows_build
    steps:
      # Download MacOS Artifacts
      - name: Download MacOS Installer
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.mac_build.outputs.mac_installer_name }}
          path: artifacts/mac/installer

      - name: Download MacOS Portable
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.mac_build.outputs.mac_portable_name }}
          path: artifacts/mac/portable

      # Download Windows Artifacts
      - name: Download Windows Installer
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.windows_build.outputs.windows_installer_name }}
          path: artifacts/windows/installer

      - name: Download Windows Portable
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.windows_build.outputs.windows_portable_name }}
          path: artifacts/windows/portable

      # Create GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ### Release Notes
            - Automated release for ${{ github.ref_name }}
            - Includes MacOS and Windows builds (Installer and Portable)
          draft: false
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Upload MacOS Artifacts
      - name: Upload MacOS Installer Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/mac/installer/${{ needs.mac_build.outputs.mac_installer_name }}
          asset_name: ${{ needs.mac_build.outputs.mac_installer_name }}
          asset_content_type: application/octet-stream

      - name: Upload MacOS Portable Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/mac/portable/${{ needs.mac_build.outputs.mac_portable_name }}
          asset_name: ${{ needs.mac_build.outputs.mac_portable_name }}
          asset_content_type: application/octet-stream

      # Upload Windows Artifacts
      - name: Upload Windows Installer Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/windows/installer/${{ needs.windows_build.outputs.windows_installer_name }}
          asset_name: ${{ needs.windows_build.outputs.windows_installer_name }}
          asset_content_type: application/octet-stream

      - name: Upload Windows Portable Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/windows/portable/${{ needs.windows_build.outputs.windows_portable_name }}
          asset_name: ${{ needs.windows_build.outputs.windows_portable_name }}
          asset_content_type: application/zip
